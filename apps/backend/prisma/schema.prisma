generator client {
  provider = "prisma-client-js"
}

//generator erd {
//  provider = "prisma-erd-generator"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid         String      @id @default(cuid())
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(512)
  name        String?     @db.VarChar(255)
  accountType AccountType @default(STANDARD) @map("account_type")

  // The permissions assigned by this user
  PermissionsOnRoles_assignedBy PermissionsOnRoles[] @relation("PermissionsOnRoles_assigned_by_uid")
  // Roles assigned by this user
  RolesOnUser_assignedBy        RolesOnUser[]        @relation("RolesOnUser_assigned_by_uid")

  // The permissions assigned to this user
  roles RolesOnUser[] @relation("RolesOnUser_roles")

  @@index(fields: [email], name: "email_idx")
}

model RolesOnUser {
  // This table keep track of which roles are assigned to which users
  // Each record in this table represents a role assigned to a user

  // The user that is being assigned a certain role
  user    User   @relation("RolesOnUser_roles", fields: [userUid], references: [uid], onDelete: Cascade)
  userUid String @map("user_uid") @db.VarChar(256)

  // The role that is being assigned to the user
  role    Role   @relation(fields: [roleUid], references: [uid], onDelete: Cascade)
  roleUid String @map("role_uid") @db.VarChar(256)

  // Keep track of who assigned the role and when
  assignedAt    DateTime @default(now()) @map("assigned_at") @db.Timestamp(6)
  assignedBy    User?    @relation("RolesOnUser_assigned_by_uid", fields: [assignedByUid], references: [uid], onDelete: SetNull)
  assignedByUid String?  @map("assigned_by_uid") @db.VarChar(256)

  @@id([userUid, roleUid])
}

model Role {
  uid         String               @id @default(cuid()) @db.VarChar(256)
  name        String               @unique @db.VarChar(256)
  description String               @db.VarChar(1024)
  permissions PermissionsOnRoles[]
  members     RolesOnUser[]
}

model PermissionsOnRoles {
  // This table keep track of which permissions are assigned to which roles

  // The role that is being assigned a certain permission
  role    Role   @relation(fields: [roleUid], references: [uid], onDelete: Cascade)
  roleUid String @map("role_uid") @db.VarChar(256)

  // The permission that is being assigned to the role
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String     @map("permission_id") @db.VarChar(512)

  // Keep track of who assigned the permission and when
  assignedAt    DateTime @default(now()) @map("assigned_at") @db.Timestamp(6)
  assignedBy    User?    @relation("PermissionsOnRoles_assigned_by_uid", fields: [assignedByUid], references: [uid], onDelete: SetNull)
  assignedByUid String?  @map("assigned_by_uid") @db.VarChar(256)

  @@id([roleUid, permissionId])
}

model Permission {
  id          String               @id @db.VarChar(512)
  description String               @db.VarChar(1024)
  roles       PermissionsOnRoles[]
}

model Computer {
  uid             String               @id @default(cuid()) @db.VarChar(256)
  name            String               @unique @db.VarChar(256)
  mac             String               @unique @db.Citext
  ipv4            String?              @unique @db.VarChar(32)
  computerGroup   ComputerGroup?       @relation(fields: [computerGroupId], references: [uid])
  computerGroupId String?              @map("computer_group_id") @db.VarChar(256)
  strategyUid     String?              @map("strategy_uid")
  strategy        IpxeStrategy?        @relation(fields: [strategyUid], references: [uid], onDelete: SetNull)
  viewOptions     ComputerViewOptions?
}

model ComputerViewOptions {
  id         Int      @id @default(autoincrement())
  computer   Computer @relation(fields: [computerId], references: [uid], onDelete: Cascade)
  computerId String   @unique @map("computer_id") @db.VarChar(256)
  order      Int      @default(0)
}

model ComputerGroup {
  uid         String                    @id @default(cuid()) @db.VarChar(256)
  name        String                    @unique @db.VarChar(256)
  computers   Computer[]
  strategyUid String?                   @map("strategy_uid")
  strategy    IpxeStrategy?             @relation(fields: [strategyUid], references: [uid], onDelete: SetNull)
  viewOptions ComputerGroupViewOptions?
}

model ComputerGroupViewOptions {
  id              Int           @id @default(autoincrement())
  computerGroup   ComputerGroup @relation(fields: [computerGroupId], references: [uid], onDelete: Cascade)
  computerGroupId String        @unique @map("computer_group_id") @db.VarChar(256)
  order           Int           @default(0)
}

model IpxeAssets {
  uid              String   @id @db.VarChar(256)
  resourceId       String   @unique @map("resource_id") @db.VarChar(512)
  originalFilename String   @map("original_filename") @db.VarChar(256)
  mediaPath        String   @map("media_path") @db.VarChar(256)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  sha256           String   @db.VarChar(256)
  fileSize         Int      @map("file_size") @db.Integer
  isEntryValid     Boolean  @default(true) @map("is_entry_valid") @db.Boolean
}

model IpxeStrategyTemplate {
  id          String         @id @db.VarChar(256)
  name        String         @unique @db.VarChar(256)
  description String         @db.VarChar(1024)
  strategies  IpxeStrategy[]
}

model IpxeStrategy {
  uid                String               @id @default(cuid()) @db.VarChar(256)
  name               String               @unique @db.VarChar(256)
  description        String               @db.Text
  strategyTemplate   IpxeStrategyTemplate @relation(fields: [strategyTemplateId], references: [id], onDelete: Restrict)
  strategyTemplateId String               @map("strategy_template_id")
  configurationData  Json                 @map("configuration_data") @db.Json
  computers          Computer[]
  computerGroups     ComputerGroup[]
  globalStrategy     GlobalIpxeStrategy?
}

model GlobalIpxeStrategy {
  id          Int           @id @default(0)
  strategyUid String?       @unique @map("strategy_uid")
  strategy    IpxeStrategy? @relation(fields: [strategyUid], references: [uid], onDelete: SetNull)
}

enum AccountType {
  STANDARD
  ADMIN
}
