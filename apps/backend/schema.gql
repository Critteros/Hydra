# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  """Unique identifier of the user"""
  uid: ID!

  """Email address of the user"""
  email: String!

  """Nickname for the user"""
  name: String

  """Type of the user account"""
  accountType: AccountType!
}

"""Type of the user account"""
enum AccountType {
  STANDARD
  ADMIN
}

type Permission {
  """Unique identifier and name of the permission"""
  id: String!

  """Description of the permission"""
  description: String!
}

type AssignedPermission {
  """Unique identifier and name of the permission"""
  id: String!

  """Description of the permission"""
  description: String!

  """User who assigned specific permission"""
  assignedBy: User

  """Date when permission was assigned"""
  assignedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Role {
  """Role unique identifier"""
  uid: String!

  """Role name"""
  name: String!

  """Role description"""
  description: String!

  """Role permissions"""
  permissions: [AssignedPermission!]!

  """Number of permissions assigned to a given role"""
  permissionsCount: Int!

  """Members of a given role"""
  members: [User!]!

  """Number of members of a given role"""
  membersCount: Int!
}

type Query {
  users: [User!]!
  user(uid: ID, email: String): User

  """Returns the current user"""
  me: User!

  """Get all permissions"""
  permissions: [Permission!]!

  """Get all roles"""
  roles: [Role!]!

  """Get a single role"""
  role(uid: String!): Role!
}

type Mutation {
  """Login as a user"""
  adminLoginAsUser(uid: String!): Boolean!

  """Updates user data"""
  updateUser(userData: UserUpdateInput!): User!

  """Updates current user password"""
  updateCurrentUserPassword(data: UpdatePasswordInput!): Boolean!

  """Admin updates user password"""
  adminUpdateUserPassword(uid: String!, password: String!): Boolean!

  """Creates a new user"""
  createNewUser(userData: CreateUserInput!): User!

  """Create a new role"""
  createRole(input: CreateRoleInput!): Role!

  """Delete a role"""
  deleteRole(uid: String!): Boolean!

  """Delete many roles"""
  deleteMultipleRoles(uids: [String!]!): Int!

  """Assign permissions to a role"""
  assignPermissionsToRole(roleUid: String!, permissionIds: [String!]!): Boolean!

  """Assign users to a role"""
  assignUsersToRole(roleUid: String!, usersUids: [String!]!): Boolean!
}

input UserUpdateInput {
  """Unique identifier of the user"""
  uid: ID

  """Email address of the user"""
  email: String

  """Nickname for the user"""
  name: String

  """Type of the user account"""
  accountType: AccountType
}

input UpdatePasswordInput {
  """Current password"""
  currentPassword: String!

  """New password"""
  newPassword: String!
}

input CreateUserInput {
  """Email address of the user"""
  email: String!

  """Password for the user"""
  password: String!

  """Nickname for the user"""
  name: String

  """Type of the user account"""
  accountType: AccountType
}

input CreateRoleInput {
  """Role name"""
  name: String!

  """Role description"""
  description: String!
}